// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProductLike {
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Stripe Customer ID
  stripeCustomerId String?

  UserProductLike UserProductLike[]

  Cart Cart[]

  Address Address[]

  Order Order[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Category {
  id      String    @id @default(cuid())
  name    String
  iconUrl String
  Product Product[]
}

model Product {
  id              String           @id @default(cuid())
  name            String
  price           Float
  description     String
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [id])
  Image           Image[]
  ProductDiscount ProductDiscount?

  UserProductLike UserProductLike[]

  CartItem CartItem[]
}

model Image {
  id        String  @id @default(cuid())
  imageUrl  String
  productId String
  isMain    Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
}

model ProductDiscount {
  id         String   @id @default(cuid())
  productId  String   @unique
  discountId String
  rate       Float
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
}

model Discount {
  id                 String            @id @default(cuid())
  name               String
  isPromoted         Boolean           @default(false)
  discountExpiration DateTime?
  ProductDiscount    ProductDiscount[]
}

enum CartStatus {
  ACTIVE
  COMPLETED
}

model Cart {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  status    CartStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  CartItem  CartItem[]
  Order     Order[]
}

model CartItem {
  id        String  @id @default(cuid())
  productId String
  quantity  Int
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  cart      Cart    @relation(fields: [cartId], references: [id])
}

model Address {
  id         String  @id @default(cuid())
  userId     String
  isDefault  Boolean @default(false)
  city       String
  street     String
  postalCode String

  user User @relation(fields: [userId], references: [id])

  Order Order[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  orderStatus       OrderStatus @default(PENDING)
  cartId            String
  shippingAddressId String
  shippingMethodId  String
  note              String?
  createdAt         DateTime    @default(now())
  paymentIntentId   String?

  Cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  shippingMethod  ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingAddress Address        @relation(fields: [shippingAddressId], references: [id])

  user User @relation(fields: [userId], references: [id])
}

model ShippingMethod {
  id                    String @id @default(cuid())
  name                  String
  price                 Float
  estimatedDeliveryTime Int

  Order Order[]
}
